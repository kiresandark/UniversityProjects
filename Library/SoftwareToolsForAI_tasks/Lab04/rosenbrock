import numpy as np

def rosenbrock(x):
    """Функция Розенброка"""
    return sum(100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)

def ant_colony_optimization(rosenbrock, num_ants, num_iterations, alpha, beta, rho, q):
    """Муравьиный алгоритм"""
    num_dimensions = 2  # Количество измерений
    tau = np.ones((num_dimensions, num_dimensions))  # Феромонная матрица

    best_solution = None
    best_fitness = float('inf')

    for i in range(num_iterations):
        solutions = np.zeros((num_ants, num_dimensions))
        fitnesses = np.zeros(num_ants)

        for j in range(num_ants):
            current = np.random.randint(num_dimensions)  # Случайный выбор стартового города
            visited = [current]
            for k in range(num_dimensions - 1):
                # Выбор следующего города с помощью правила выбора муравья
                probs = np.zeros(num_dimensions)
                unvisited = list(set(range(num_dimensions)) - set(visited))
                for l in unvisited:
                    probs[l] = tau[current][l]**alpha * (1.0 / rosenbrock(np.array([current, l]))**beta)
                probs = probs / sum(probs)
                next = np.random.choice(range(num_dimensions), p=probs)
                visited.append(next)
                current = next
            solutions[j] = visited
            fitnesses[j] = rosenbrock(visited)
            if fitnesses[j] < best_fitness:
                best_solution = visited
                best_fitness = fitnesses[j]

        # Обновление феромонной матрицы с помощью правила обновления феромона
        delta_tau = np.zeros((num_dimensions, num_dimensions))
        for j in range(num_ants):
            for k in range(num_dimensions - 1):
                delta_tau[int(solutions[j][k])][int(solutions[j][k+1])] += q / fitnesses[j]
        tau = (1 - rho) * tau + delta_tau

    return best_solution, best_fitness

# Запуск муравьиного алгоритма
num_ants = 10
num_iterations = 100
alpha = 1
beta = 5
rho = 0.5
q = 100
best_solution, best_fitness = ant_colony_optimization(rosenbrock, num_ants, num_iterations, alpha, beta, rho, q)

# Вывод результатов
print("Best solution:", best_solution)
print("Best fitness:", best_fitness)